{"version":3,"sources":["panels/Home.js","popouts/Ask.js","App.js","index.js","vid/ballDraft.webm"],"names":["Home","id","left","question","retry","updateInfo","debugSetAttemptsZero","answers","useState","answer","setAnswer","videoPlayed","setVideoPlayed","videoRef","useRef","useEffect","current","play","num","Math","floor","random","length","title","className","ref","width","height","preload","onEnded","src","videoSample","type","size","level","onClick","Ask","setQuestion","setPopout","valid","setValid","v","h","style","background","top","placeholder","value","onChange","e","target","status","bottom","App","setLeft","userInfo","setUserInfo","popout","a","connect","sendPromise","keys","response","info","count","console","log","map","key","Number","lastDate","Date","fetchData","countLeft","alert","activePanel","newInfo","String","then","res","send","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.82d4e46c.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Panel from \"@vkontakte/vkui/dist/components/Panel/Panel\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\nimport Group from \"@vkontakte/vkui/dist/components/Group/Group\";\nimport Div from \"@vkontakte/vkui/dist/components/Div/Div\";\nimport \"./Home.css\";\n\nimport videoSample from \"../vid/ballDraft.webm\";\n\nconst Home = ({\n  id,\n  left,\n  question,\n  retry,\n  updateInfo,\n  debugSetAttemptsZero\n}) => {\n  const answers = [\"да\", \"нет\", \"хз\"];\n  const [answer, setAnswer] = useState(null);\n  const [videoPlayed, setVideoPlayed] = useState(false);\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    if (question != null) {\n      videoRef.current.play();\n      updateInfo();\n    }\n  }, [question]);\n\n  useEffect(() => {\n    if (answer == null) {\n      const num = Math.floor(Math.random() * answers.length);\n      setAnswer(answers[num]);\n    }\n  }, [answer, answers]);\n\n  return (\n    <Panel id={id}>\n      <Group title={\"Осталось \" + left + \". \" + question}>\n        <Div className=\"video-container\">\n          <video\n            ref={videoRef}\n            width=\"100%\"\n            height=\"auto\"\n            preload=\"auto\"\n            onEnded={() => setVideoPlayed(true)}\n          >\n            <source src={videoSample} type=\"video/webm\" />\n          </video>\n          {answer != null && videoPlayed && (\n            <Div className=\"overlay\">{answer}</Div>\n          )}\n        </Div>\n\n        {question != null && (\n          <Div>\n            <Button\n              size=\"xl\"\n              level=\"2\"\n              onClick={() => {\n                setAnswer(null);\n                setVideoPlayed(false);\n                retry();\n              }}\n            >\n              Еще Раз\n            </Button>\n          </Div>\n        )}\n        <Div>\n          <Button size=\"xl\" level=\"2\" onClick={() => debugSetAttemptsZero()}>\n            Сбросить попытки\n          </Button>\n        </Div>\n      </Group>\n    </Panel>\n  );\n};\nHome.propTypes = {\n  id: PropTypes.string.isRequired,\n  left: PropTypes.number.isRequired,\n  question: PropTypes.string,\n  retry: PropTypes.func.isRequired,\n  updateInfo: PropTypes.func.isRequired,\n  debugSetAttemptsZero: PropTypes.func.isRequired\n};\n\nexport default Home;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { PopoutWrapper, FormLayout, Textarea, Button } from '@vkontakte/vkui';\n\n\nconst Ask = ({ question, setQuestion, setPopout }) => {\n\tconst [valid, setValid] = useState(true);\n\tconst submit = () => {\n\t\tsetValid(question != null)\n\t\tif (question != null) {\n\t\t\tsetQuestion(question)\n\t\t\tsetPopout(null)\n\t\t}\n\t}\n\treturn (\n\t\t<PopoutWrapper v=\"center\" h=\"center\" >\n\t\t\t<FormLayout style={{ background: '#232323' }}>\n\t\t\t\t<Textarea top=\"Задайте вопрос шару\" placeholder={\"Я пидор?\"}\n\t\t\t\t\tvalue={question} onChange={e => question = e.target.value}\n\t\t\t\t\tstatus={valid ? 'valid' : 'error'}\n\t\t\t\t\tbottom={valid ? '' : 'Пожалуйста, введите вопрос'} />\n\t\t\t\t<Button type=\"submit\" onClick={() => { submit() }}>Готово</Button>\n\t\t\t</FormLayout>\n\t\t</PopoutWrapper>\n\t);\n}\nAsk.propTypes = {\n\tquestion: PropTypes.string,\n\tsetQuestion: PropTypes.func.isRequired,\n\tsetPopout: PropTypes.func.isRequired,\n};\n\nexport default Ask;\n","import React, { useState, useEffect } from \"react\";\nimport connect from \"@vkontakte/vk-connect\";\nimport View from \"@vkontakte/vkui/dist/components/View/View\";\nimport ScreenSpinner from \"@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner\";\nimport \"@vkontakte/vkui/dist/vkui.css\";\n\nimport Home from \"./panels/Home\";\nimport Ask from \"./popouts/Ask\";\n\nconst App = () => {\n  const maxAttempts = 10;\n  const [left, setLeft] = useState(maxAttempts);\n  const [userInfo, setUserInfo] = useState(null);\n  const [question, setQuestion] = useState(null);\n  const [popout, setPopout] = useState(<ScreenSpinner size=\"large\" />);\n  const retry = () => {\n    setQuestion(null);\n  };\n  const updateInfo = () => {\n    const newInfo = {\n      count: userInfo.count + 1,\n      lastDate: new Date()\n    };\n    connect\n      .sendPromise(\"VKWebAppStorageSet\", {\n        key: \"count\",\n        value: String(newInfo.count)\n      })\n      .then(\n        connect.sendPromise(\"VKWebAppStorageSet\", {\n          key: \"lastDate\",\n          value: String(newInfo.lastDate)\n        })\n      )\n      .then(res => {\n        setUserInfo(newInfo);\n      });\n  };\n\n\n  const debugSetAttemptsZero = () => {\n    const newInfo = {\n      count: 0,\n      lastDate: new Date()\n    };\n    connect\n      .sendPromise(\"VKWebAppStorageSet\", {\n        key: \"count\",\n        value: String(newInfo.count)\n      })\n      .then(\n        connect.sendPromise(\"VKWebAppStorageSet\", {\n          key: \"lastDate\",\n          value: String(newInfo.lastDate)\n        })\n      )\n      .then(res => {\n        setUserInfo(newInfo);\n      });\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      // get last roll data here\n      const response = await connect.sendPromise(\"VKWebAppStorageGet\", {\n        keys: [\"count\", \"lastDate\"]\n      });\n      setPopout(null);\n      var info = { count: 0 };\n      console.log(response.keys);\n      console.log(info);\n      response.keys.map(e => {\n        switch (e.key) {\n          case \"count\":\n            info.count = Number(e.value);\n            break;\n          case \"lastDate\":\n            info.lastDate = Date(e.value);\n        }\n      });\n      console.log(info);\n      setUserInfo(info);\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const countLeft =\n      userInfo == null ? maxAttempts : maxAttempts - userInfo.count;\n    setLeft(countLeft);\n    if (userInfo != null && countLeft <= 0) {\n      // TODO: if user has no roll setPopout(pay) - open payment dialog\n      alert(\"Please Pay\");\n    }\n  }, [userInfo]);\n\n  useEffect(() => {\n    if (question == null && userInfo != null && userInfo.count < maxAttempts) {\n      setPopout(\n        <Ask\n          question={question}\n          setQuestion={setQuestion}\n          setPopout={setPopout}\n        />\n      );\n    }\n  }, [question, userInfo]);\n\n  return (\n    <View activePanel=\"home\" popout={popout}>\n      <Home\n        id=\"home\"\n        question={question}\n        left={left}\n        retry={retry}\n\t\tupdateInfo={updateInfo}\n\t\tdebugSetAttemptsZero={debugSetAttemptsZero}\n      />\n    </View>\n  );\n};\n\nexport default App;\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/ballDraft.597a87d4.webm\";"],"sourceRoot":""}